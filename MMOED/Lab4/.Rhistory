#
x^2
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24,28)
cols = c(5,10,15,20,25,30)
df = data.frame(c(2,0,0,0,0,0), c(4,3,0,0,0,0), c(0,7,5,7,0,0),
c(0,0,30,10,5,0), c(0,0,10,8,6,0), c(0,0,0,0,3,0), row.names = rows)
names(df) = cols
kable(df, format = "markdown")
# Переменные для расчетов
n = 100
x = c()
xkv = c()
y = c()
ykv = c()
xy = c()
count = 1
len = length(cols)
# Найдем средние выборочные x, y, xy
for (i1 in 1:len) {
for (i2 in 1:len) {
x[count] = rows[i2] * df[i2,i1]
xkv[count] = rows[i2] ^ 2 * df[i2,i1]
y[count] = cols[i1] * df[i2,i1]
ykv[count] = cols[i1] ^ 2 * df[i2,i1]
xy[count] = rows[i2] * cols[i1] * df[i2,i1]
count = count + 1
}
x = sum(x) / n
xkv = sum(xkv) / n
y = sum(y) / n
ykv = sum(ykv) / n
xy = sum(xy) / n
#
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24,28)
cols = c(5,10,15,20,25,30)
df = data.frame(c(2,0,0,0,0,0), c(4,3,0,0,0,0), c(0,7,5,7,0,0),
c(0,0,30,10,5,0), c(0,0,10,8,6,0), c(0,0,0,0,3,0), row.names = rows)
names(df) = cols
kable(df, format = "markdown")
# Переменные для расчетов
n = 100
x = c() ; xkv = c()
y = c()
ykv = c()
xy = c()
count = 1
len = length(cols)
# Найдем средние выборочные x, y, xy
for (i1 in 1:len) {
for (i2 in 1:len) {
x[count] = rows[i2] * df[i2,i1]
xkv[count] = rows[i2] ^ 2 * df[i2,i1]
y[count] = cols[i1] * df[i2,i1]
ykv[count] = cols[i1] ^ 2 * df[i2,i1]
xy[count] = rows[i2] * cols[i1] * df[i2,i1]
count = count + 1
}
x = sum(x) / n
xkv = sum(xkv) / n
y = sum(y) / n
ykv = sum(ykv) / n
xy = sum(xy) / n
#
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24,28)
cols = c(5,10,15,20,25,30)
df = data.frame(c(2,0,0,0,0,0), c(4,3,0,0,0,0), c(0,7,5,7,0,0),
c(0,0,30,10,5,0), c(0,0,10,8,6,0), c(0,0,0,0,3,0), row.names = rows)
names(df) = cols
kable(df, format = "markdown")
# Переменные для расчетов
n = 100
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
len = length(cols)
# Найдем средние выборочные x, y, xy
for (i1 in 1:len) {
for (i2 in 1:len) {
x[count] = rows[i2] * df[i2,i1]
xkv[count] = rows[i2] ^ 2 * df[i2,i1]
y[count] = cols[i1] * df[i2,i1]
ykv[count] = cols[i1] ^ 2 * df[i2,i1]
xy[count] = rows[i2] * cols[i1] * df[i2,i1]
count = count + 1
}
x = sum(x) / n
xkv = sum(xkv) / n
y = sum(y) / n
ykv = sum(ykv) / n
xy = sum(xy) / n
#
View(df)
cor.test(df)
cor(df)
View(df)
View(df1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24)
rows1 = c(8,12,16,20,24,"n")
cols = c(5,10,15,20,25,30)
cols1 = c(5,10,15,20,25,30,"m")
df = data.frame(c(2,0,0,0,0), c(4,3,0,0,0), c(0,7,5,7,0),
c(0,0,30,10,5), c(0,0,10,8,6), c(0,0,0,0,3), row.names = rows)
df1 = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19),
c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3),
c(6,10,45,25,14,100), row.names = rows1)
names(df) = cols
names(df1) = cols1
kable(df1, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
# вычисление x, y, xy
for (i in 1:length(cols)) {
for (k in 1:length(rows)) {
x[count] = rows[k] * df[k,i]
xkv[count] = rows[k] ^ 2 * df[k,i]
y[count] = cols[i] * df[k,i]
ykv[count] = cols[i] ^ 2 * df[k,i]
xy[count] = rows[k] * cols[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
View(df1)
cor(df1)
symnum(cor(df1))
View(df1)
chisq.test(df)
chisq.test(df1)
t.test(df)
t.test(df1)
t.test(df)
vcov(df)
View(df1)
View(df)
plot(df)
View(df1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24)
rows1 = c(8,12,16,20,24,"n")
cols = c(5,10,15,20,25,30)
cols1 = c(5,10,15,20,25,30,"m")
df = data.frame(c(2,0,0,0,0), c(4,3,0,0,0), c(0,7,5,7,0),
c(0,0,30,10,5), c(0,0,10,8,6), c(0,0,0,0,3), row.names = rows)
df1 = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19),
c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3),
c(6,10,45,25,14,100), row.names = rows1)
names(df) = cols
names(df1) = cols1
kable(df1, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
# вычисление x, y, xy
for (m in 1:length(cols)) {
for (n in 1:length(rows)) {
x[count] = rows[n] * df[n,m]
xkv[count] = rows[n] ^ 2 * df[n,m]
y[count] = cols[m] * df[n,m]
ykv[count] = cols[m] ^ 2 * df[n,m]
xy[count] = rows[n] * cols[m] * df[n,m]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
plot(df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24)
rows1 = c(8,12,16,20,24,"n")
cols = c(5,10,15,20,25,30)
cols1 = c(5,10,15,20,25,30,"m")
df = data.frame(c(2,0,0,0,0), c(4,3,0,0,0), c(0,7,5,7,0),
c(0,0,30,10,5), c(0,0,10,8,6), c(0,0,0,0,3), row.names = rows)
df1 = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19),
c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3),
c(6,10,45,25,14,100), row.names = rows1)
names(df) = cols
names(df1) = cols1
kable(df1, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
# вычисление x, y, xy
for (i in 1:length(cols)) {
for (k in 1:length(rows)) {
x[count] = rows[k] * df[k,i]
xkv[count] = rows[k] ^ 2 * df[k,i]
y[count] = cols[i] * df[k,i]
ykv[count] = cols[i] ^ 2 * df[k,i]
xy[count] = rows[k] * cols[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
plot(df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
#rows = c(8,12,16,20,24)
rows = c(8,12,16,20,24,"n")
#cols = c(5,10,15,20,25,30)
cols = c(5,10,15,20,25,30,"m")
#df = data.frame(c(2,0,0,0,0), c(4,3,0,0,0), c(0,7,5,7,0), c(0,0,30,10,5), c(0,0,10,8,6), c(0,0,0,0,3), row.names = rows)
df = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19), c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3), c(6,10,45,25,14,100), row.names = rows1)
names(df) = cols
#names(df) = cols1
kable(df, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
len_cols = length(cols) - 1
len_rows = length(rows) - 1
# вычисление x, y, xy
for (i in 1:len_cols) {
for (k in 1:len_rows) {
x[count] = rows[k] * df[k,i]
xkv[count] = rows[k] ^ 2 * df[k,i]
y[count] = cols[i] * df[k,i]
ykv[count] = cols[i] ^ 2 * df[k,i]
xy[count] = rows[k] * cols[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
plot(df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows1 = c(8,12,16,20,24)
rows = c(8,12,16,20,24,"n")
cols1 = c(5,10,15,20,25,30)
cols = c(5,10,15,20,25,30,"m")
#df = data.frame(c(2,0,0,0,0), c(4,3,0,0,0), c(0,7,5,7,0), c(0,0,30,10,5), c(0,0,10,8,6), c(0,0,0,0,3), row.names = rows)
df = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19), c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3), c(6,10,45,25,14,100), row.names = rows)
names(df) = cols
#names(df) = cols1
kable(df, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
len_cols = length(cols1) - 1
len_rows = length(rows1) - 1
# вычисление x, y, xy
for (i in 1:len_cols) {
for (k in 1:len_rows) {
x[count] = rows1[k] * df[k,i]
xkv[count] = rows1[k] ^ 2 * df[k,i]
y[count] = cols1[i] * df[k,i]
ykv[count] = cols1[i] ^ 2 * df[k,i]
xy[count] = rows1[k] * cols1[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
plot(df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows = c(8,12,16,20,24,"n")
cols = c(5,10,15,20,25,30,"m")
rows1 = c(8,12,16,20,24)
cols1 = c(5,10,15,20,25,30)
df = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19), c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3), c(6,10,45,25,14,100), row.names = rows)
names(df) = cols
kable(df, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
# вычисление x, y, xy
for (i in 1:length(cols1)) {
for (k in 1:length(rows1)) {
x[count] = rows1[k] * df[k,i]
xkv[count] = rows1[k] ^ 2 * df[k,i]
y[count] = cols1[i] * df[k,i]
ykv[count] = cols1[i] ^ 2 * df[k,i]
xy[count] = rows1[k] * cols1[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(n - 2) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
plot(df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Chunk 2
rows1 = c(8,12,16,20,24,"n")
cols1 = c(5,10,15,20,25,30,"m")
rows = c(8,12,16,20,24)
cols = c(5,10,15,20,25,30)
df = data.frame(c(2,0,0,0,0,2), c(4,3,0,0,0,7), c(0,7,5,7,0,19), c(0,0,30,10,5,45), c(0,0,10,8,6,24), c(0,0,0,0,3,3), c(6,10,45,25,14,100), row.names = rows1)
names(df) = cols1
kable(df, format = "markdown")
# Chunk 3
# обьем выборки
n = 100
# переменные для вычислений
x = c() ; xkv = c() ; y = c() ; ykv = c() ; xy = c()
count = 1
# вычисление x, y, xy
for (i in 1:length(cols)) {
for (k in 1:length(rows)) {
x[count] = rows[k] * df[k,i]
xkv[count] = rows[k] ^ 2 * df[k,i]
y[count] = cols[i] * df[k,i]
ykv[count] = cols[i] ^ 2 * df[k,i]
xy[count] = rows[k] * cols[i] * df[k,i]
count = count + 1
}
x = sum(x) / n ; x
y = sum(y) / n ; y
xy = sum(xy) / n ; xy
# Chunk 4
xkv = sum(xkv) / n ; xkv
ykv = sum(ykv) / n ; ykv
vx = sqrt(xkv - x ^ 2) ; vx
vy = sqrt(ykv - y ^ 2) ; vy
# Chunk 5
r = (xy - x * y) / (vx * vy) ; r
# Chunk 6
# уровень значимости
a = 0.05
# число степеней свободы
k = n - 2
# критический критерий (по таблице)
Tk = 1.985
Tn = r * (sqrt(k) / sqrt(1 - r ^ 2)) ; Tn
# Chunk 7
tmp = c(); y = c()
m = c(6,10,45,25,14)
for (i in 1:length(rows)) {
for (k in 1:length(cols)) {
tmp[k] = cols[k] * df[i,k]
}
y[i] = sum(tmp) / m[i]
}
??plot
xy.coords(rows, m)
xy.coords(rows, y)
plot(xy.coords(rows, y))
lines(y)
lines(rows,y)
lines(rows,sd(y))
sd(y)
y * r
plot(xy.coords(rows, y*r))
plot(xy.coords(rows, rows*r))
y
rows * r
plot(xy.coords(rows, y -rows*r))
plot(xy.coords(rows, y - rows*r))
sum(rows)
sum(y)
80^2
sum(rows) * sum(y)
6400 * 5 - 80 * 80
6949.968 * 5 - 80 * 86.8746
27799.87 / 25600
6400 * 86.8746 - 6949.968 * 80
y1 = a * rows + b
a = 1.08
b = 1.16
y1 = a * rows + b
plot(xy.coords(rows, y))
lines(rows, y1)
??par
??plot
plot(xy.coords(rows, y), xlab = "x", ylab = "y")
lines(rows, y1)
knit_with_parameters('~/Documents/Education/IVT/MMOED/Project_4/Project_4.Rmd')
