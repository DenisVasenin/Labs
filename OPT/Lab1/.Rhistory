} else {
r1 = r(0.618, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
}
iter = 1
# последующие итерации - деление отрезка одной точкой в 0.618
while(TRUE) {
iter = iter + 1
p = hs(k, r0, dr)
# f = h(k, r0, dr)
# fplot[iter] = f
# aplot[iter] = a
if (abs(p) < e) break
if (p > 0) {
r1 = r(k, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
} else {
r0 = r(k, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
}
# Chunk 9
acur
# Chunk 10
p
# Chunk 11
iter
# Chunk 12
#ggplot() + geom_line(aes(aplot, fplot)) + ylab("h(a)") + xlab("a")
# Chunk 13
# h = D(expression((x0 + a * x1)^2 + 10 * (y0 + a * y1)^2 - (x0 + a * x1) * (y0 + a * y1) - (y0 + a * y1)), "a")
# h
#
# 2 * (x1 * (x0 + a * x1)) + 10 * (2 * (y1 * (y0 + a * y1))) - (x1 * (y0 + a * y1) + (x0 + a * x1) * y1) - y1
#
# r = function(r0, dr) {                              # точка r
#     return(r0[1] + a * dr[1], r0[2] + a * dr[2])
# }
# h = function(r) {                                     # функция h(a)
#     return(r[1]^2 + 10 * r[2]^2 - r[1] * r[2] - r[2])
# }
#
# hx = function(r) {                                    # первая производная по x
#     return(2 * r[1] - r[2])
# }
#
# hy = function(r) {                                    # первая производная по y
#     return(20 * r[2] - r[1] - 1)
# }
#
# r0dr = sqrt((dr[1] - r0[1])^2 + (dr[2] - r0[2])^2)    # длина вектора r0dr
# cosa = (r0[1] - dr[1]) / r0dr                         # направляющий cos a
# cosb = (r0[2] - dr[2]) / r0dr                         # направляющий cos b
#
# fs = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs
#
# r = dr
#
# fs1 = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs1
#
# g = c(fx(dr[1], dr[2]), fy(dr[1], dr[2]))
# gnc = sqrt(g[1]^2 + g[2]^2)
# gnc
# Chunk 1
library(ggplot2)
# Chunk 2
x = c(rep(-150:150, 301))
y = c(rep(-150:150, each = 301))
dafr = data.frame(x, y)
f = x^2 + 10 * y^2 - x * y - y
dafr$z = with(dafr, f)
ggplot(data = dafr, aes(x = x, y = y, z = z)) + geom_contour()
# Chunk 3
r0 = c(-2, 2)                                              # начальная точка вектора
r1 = c(0, 0)                                               # направляющая точка
dr = c(r1[1] - r0[1], r1[2] - r0[2])                       # r1 - r0
e = 0.001                                                  # точность по производной
# Chunk 4
r = function(a, r0, dr) {                                  # точка r
return(c(r0[1] + a * dr[1], r0[2] + a * dr[2]))
}
h = function(a, r0, dr) {                                  # функция h(a)
return((r0[1] + a * dr[1])^2 + 10 * (r0[2] + a * dr[2])^2 - (r0[1] + a * dr[1]) * (r0[2] + a * dr[2]) - (r0[2] + a * dr[2]))
}
hs = function(a, r0, dr) {                                 # производная функции h(a)
return(2 * (dr[1] * (r0[1] + a * dr[1])) + 10 * (2 * (dr[2] * (r0[2] + a * dr[2]))) - (dr[2] * (r0[2] + a * dr[2]) + (r0[1] + a * dr[1]) * dr[2]) - dr[2])
}
# Chunk 5
acur = 0                                                   # текущий шаг
alast = 0                                                  # предыдущий шаг
while (TRUE) {                                             # локализуем минимум
p = hs(acur, r0, dr)
newr0 = r(alast, r0, dr)
newr1 = r(acur, r0, dr)
if (p > 0) break
else {
alast = acur
acur = acur + 0.2
}
# Chunk 6
e = 0.001                                                  # точность по производной
zs = 0.618                                                 # точка золотого сечения
zss = 0.382                                                # точка симметричная zs
a = 0                                                      # шаг
r0 = newr0                                                 # новая r0
r1 = newr1                                                 # новая r1
dr = c(r1[1] - r0[1], r1[2] - r0[2])                       # новая dr
iter = 0                                                   # итерации
fplot = c()                                                # векторы для графика
aplot = c()
# Chunk 7
# первая итерация - деление отрезка двумя симметричными точками в zss=0.382 и zs=0.618
p = hs(zs, r0, dr)
p1 = hs(zss, r0, dr)
if (p > p1 | p < 0) {
r0 = r(zss, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
l = 1 - zss
a = zss
} else {
r1 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
}
iter = 1
# последующие итерации - деление отрезка одной точкой в zs=0.618
while(TRUE) {
iter = iter + 1
p = hs(zs, r0, dr)
f = h(a, r0, dr)
# fplot[iter] = f
# aplot[iter] = a
if (abs(p) < e) break
if (p > 0) {
r1 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
} else {
r0 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
l = l - (l * zs)
a = a + (l * zs)
}
# Chunk 8
acur
# Chunk 9
p
# Chunk 10
iter
# Chunk 11
#ggplot() + geom_line(aes(aplot, fplot)) + ylab("h(a)") + xlab("a")
# Chunk 12
#
# iter = 0                                                   # итерации
# a = 1                                                      # начальный шаг
# k = 5                                                      # кофициент уменьшения шага
# acur = 0                                                   # текущий шаг
# alast = 0                                                  # предыдущий шаг
# fplot = c()                                                # векторы для графика
# aplot = c()
#
# while (TRUE) {                                             # поехали
#     iter = iter + 1
#     p = hs(acur, r0, dr)
#     f = h(acur, r0, dr)
#     fplot[iter] = f
#     aplot[iter] = acur
#     if (abs(p) < e) break
#     if (p > 0) {
#         a = a / k
#         acur = alast + a
#     } else {
#         alast = acur
#         acur = acur + a
#     }
# }
#
# Chunk 13
# h = D(expression((x0 + a * x1)^2 + 10 * (y0 + a * y1)^2 - (x0 + a * x1) * (y0 + a * y1) - (y0 + a * y1)), "a")
# h
#
# 2 * (x1 * (x0 + a * x1)) + 10 * (2 * (y1 * (y0 + a * y1))) - (x1 * (y0 + a * y1) + (x0 + a * x1) * y1) - y1
#
# r = function(r0, dr) {                              # точка r
#     return(r0[1] + a * dr[1], r0[2] + a * dr[2])
# }
# h = function(r) {                                     # функция h(a)
#     return(r[1]^2 + 10 * r[2]^2 - r[1] * r[2] - r[2])
# }
#
# hx = function(r) {                                    # первая производная по x
#     return(2 * r[1] - r[2])
# }
#
# hy = function(r) {                                    # первая производная по y
#     return(20 * r[2] - r[1] - 1)
# }
#
# r0dr = sqrt((dr[1] - r0[1])^2 + (dr[2] - r0[2])^2)    # длина вектора r0dr
# cosa = (r0[1] - dr[1]) / r0dr                         # направляющий cos a
# cosb = (r0[2] - dr[2]) / r0dr                         # направляющий cos b
#
# fs = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs
#
# r = dr
#
# fs1 = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs1
#
# g = c(fx(dr[1], dr[2]), fy(dr[1], dr[2]))
# gnc = sqrt(g[1]^2 + g[2]^2)
# gnc
# Chunk 1
library(ggplot2)
# Chunk 2
x = c(rep(-150:150, 301))
y = c(rep(-150:150, each = 301))
dafr = data.frame(x, y)
f = x^2 + 10 * y^2 - x * y - y
dafr$z = with(dafr, f)
ggplot(data = dafr, aes(x = x, y = y, z = z)) + geom_contour()
# Chunk 3
r0 = c(-2, 2)                                              # начальная точка вектора
r1 = c(0, 0)                                               # направляющая точка
dr = c(r1[1] - r0[1], r1[2] - r0[2])                       # r1 - r0
e = 0.001                                                  # точность по производной
# Chunk 4
r = function(a, r0, dr) {                                  # точка r
return(c(r0[1] + a * dr[1], r0[2] + a * dr[2]))
}
h = function(a, r0, dr) {                                  # функция h(a)
return((r0[1] + a * dr[1])^2 + 10 * (r0[2] + a * dr[2])^2 - (r0[1] + a * dr[1]) * (r0[2] + a * dr[2]) - (r0[2] + a * dr[2]))
}
hs = function(a, r0, dr) {                                 # производная функции h(a)
return(2 * (dr[1] * (r0[1] + a * dr[1])) + 10 * (2 * (dr[2] * (r0[2] + a * dr[2]))) - (dr[2] * (r0[2] + a * dr[2]) + (r0[1] + a * dr[1]) * dr[2]) - dr[2])
}
# Chunk 5
acur = 0                                                   # текущий шаг
alast = 0                                                  # предыдущий шаг
while (TRUE) {                                             # локализуем минимум
p = hs(acur, r0, dr)
newr0 = r(alast, r0, dr)
newr1 = r(acur, r0, dr)
if (p > 0) break
else {
alast = acur
acur = acur + 0.2
}
# Chunk 6
e = 0.001                                                  # точность по производной
zs = 0.618                                                 # точка золотого сечения
zss = 0.382                                                # точка симметричная zs
a = 0                                                      # шаг
r0 = newr0                                                 # новая r0
r1 = newr1                                                 # новая r1
dr = c(r1[1] - r0[1], r1[2] - r0[2])                       # новая dr
iter = 0                                                   # итерации
fplot = c()                                                # векторы для графика
aplot = c()
# Chunk 7
# первая итерация - деление отрезка двумя симметричными точками в zss=0.382 и zs=0.618
p = hs(zs, r0, dr)
p1 = hs(zss, r0, dr)
if (p > p1 | p < 0) {
r0 = r(zss, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
a = zss
l = 1 - zss
} else {
r1 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
}
iter = 1
# последующие итерации - деление отрезка одной точкой в zs=0.618
while(TRUE) {
iter = iter + 1
p = hs(zs, r0, dr)
f = h(a, r0, dr)
# fplot[iter] = f
# aplot[iter] = a
if (abs(p) < e) break
if (p > 0) {
r1 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
} else {
r0 = r(zs, r0, dr)
dr = c(r1[1] - r0[1], r1[2] - r0[2])
a = a + (l * zs)
l = l - (l * zs)
}
# Chunk 8
acur
# Chunk 9
p
# Chunk 10
iter
# Chunk 11
#ggplot() + geom_line(aes(aplot, fplot)) + ylab("h(a)") + xlab("a")
# Chunk 12
#
# iter = 0                                                   # итерации
# a = 1                                                      # начальный шаг
# k = 5                                                      # кофициент уменьшения шага
# acur = 0                                                   # текущий шаг
# alast = 0                                                  # предыдущий шаг
# fplot = c()                                                # векторы для графика
# aplot = c()
#
# while (TRUE) {                                             # поехали
#     iter = iter + 1
#     p = hs(acur, r0, dr)
#     f = h(acur, r0, dr)
#     fplot[iter] = f
#     aplot[iter] = acur
#     if (abs(p) < e) break
#     if (p > 0) {
#         a = a / k
#         acur = alast + a
#     } else {
#         alast = acur
#         acur = acur + a
#     }
# }
#
# Chunk 13
# h = D(expression((x0 + a * x1)^2 + 10 * (y0 + a * y1)^2 - (x0 + a * x1) * (y0 + a * y1) - (y0 + a * y1)), "a")
# h
#
# 2 * (x1 * (x0 + a * x1)) + 10 * (2 * (y1 * (y0 + a * y1))) - (x1 * (y0 + a * y1) + (x0 + a * x1) * y1) - y1
#
# r = function(r0, dr) {                              # точка r
#     return(r0[1] + a * dr[1], r0[2] + a * dr[2])
# }
# h = function(r) {                                     # функция h(a)
#     return(r[1]^2 + 10 * r[2]^2 - r[1] * r[2] - r[2])
# }
#
# hx = function(r) {                                    # первая производная по x
#     return(2 * r[1] - r[2])
# }
#
# hy = function(r) {                                    # первая производная по y
#     return(20 * r[2] - r[1] - 1)
# }
#
# r0dr = sqrt((dr[1] - r0[1])^2 + (dr[2] - r0[2])^2)    # длина вектора r0dr
# cosa = (r0[1] - dr[1]) / r0dr                         # направляющий cos a
# cosb = (r0[2] - dr[2]) / r0dr                         # направляющий cos b
#
# fs = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs
#
# r = dr
#
# fs1 = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs1
#
# g = c(fx(dr[1], dr[2]), fy(dr[1], dr[2]))
# gnc = sqrt(g[1]^2 + g[2]^2)
# gnc
l + a
# Chunk 1
library(ggplot2)
# Chunk 2
x = c(rep(-150:150, 301))
y = c(rep(-150:150, each = 301))
dafr = data.frame(x, y)
f = x^2 + 10 * y^2 - x * y - y
dafr$z = with(dafr, f)
ggplot(data = dafr, aes(x = x, y = y, z = z)) + geom_contour()
# Chunk 3
r0 = c(-2, 2)                                              # начальная точка вектора
r1 = c(0, 0)                                               # направляющая точка
dr = c(r1[1] - r0[1], r1[2] - r0[2])                       # r1 - r0
e = 0.001                                                  # точность по производной
# Chunk 4
r = function(a, r0, dr) {                                  # точка r
return(c(r0[1] + a * dr[1], r0[2] + a * dr[2]))
}
h = function(a, r0, dr) {                                  # функция h(a)
return((r0[1] + a * dr[1])^2 + 10 * (r0[2] + a * dr[2])^2 - (r0[1] + a * dr[1]) * (r0[2] + a * dr[2]) - (r0[2] + a * dr[2]))
}
hs = function(a, r0, dr) {                                 # производная функции h(a)
return(2 * (dr[1] * (r0[1] + a * dr[1])) + 10 * (2 * (dr[2] * (r0[2] + a * dr[2]))) - (dr[2] * (r0[2] + a * dr[2]) + (r0[1] + a * dr[1]) * dr[2]) - dr[2])
}
# Chunk 5
acur = 0                                                   # текущий шаг
alast = 0                                                  # предыдущий шаг
while (TRUE) {                                             # локализуем минимум c диапазоном 0.2
p = hs(acur, r0, dr)
newr0 = r(alast, r0, dr)                                 # новая r0
newr1 = r(acur, r0, dr)                                  # новая r1
if (p > 0) break
else {
alast = acur
acur = acur + 0.2
}
# Chunk 6
zs = 0.618                                                 # точка золотого сечения
zss = 0.382                                                # точка симметричная zs
a = 0                                                      # шаг
newdr = c(newr1[1] - newr0[1], newr1[2] - newr0[2])        # новая dr
fplot = c()                                                # векторы для графика
aplot = c()
# Chunk 7
# первая итерация - деление отрезка двумя симметричными точками в zss=0.382 и zs=0.618
iter = 1
p = hs(zs, newr0, newdr)
p1 = hs(zss, newr0, newdr)
f = h(a, r0, dr)
fplot[iter] = f
aplot[iter] = a
if (p > p1 | p < 0) {
newr0 = r(zss, newr0, newdr)
newdr = c(newr1[1] - newr0[1], newr1[2] - newr0[2])
a = zss
l = 1 - zss
} else {
newr1 = r(zs, newr0, newdr)
newdr = c(newr1[1] - newr0[1], newr1[2] - newr0[2])
}
# последующие итерации - деление отрезка одной точкой в zs=0.618
while(TRUE) {
iter = iter + 1
p = hs(zs, newr0, newdr)
f = h(a, r0, dr)
fplot[iter] = f
aplot[iter] = a
if (abs(p) < e) break
if (p > 0) {
newr1 = r(zs, newr0, newdr)
newdr = c(newr1[1] - newr0[1], newr1[2] - newr0[2])
} else {
newr0 = r(zs, newr0, newdr)
newdr = c(newr1[1] - newr0[1], newr1[2] - newr0[2])
a = a + (l * zs)
l = l - (l * zs)
}
# Chunk 8
r = r(a, r0, dr)
r
# Chunk 9
a
# Chunk 10
p
# Chunk 11
iter
# Chunk 12
ggplot() + geom_line(aes(aplot, fplot)) + ylab("h(a)") + xlab("a")
# Chunk 13
#
# iter = 0                                                   # итерации
# a = 1                                                      # начальный шаг
# k = 5                                                      # кофициент уменьшения шага
# acur = 0                                                   # текущий шаг
# alast = 0                                                  # предыдущий шаг
# fplot = c()                                                # векторы для графика
# aplot = c()
#
# while (TRUE) {
#     iter = iter + 1
#     p = hs(acur, r0, dr)
#     f = h(acur, r0, dr)
#     fplot[iter] = f
#     aplot[iter] = acur
#     if (abs(p) < e) break
#     if (p > 0) {
#         a = a / k
#         acur = alast + a
#     } else {
#         alast = acur
#         acur = acur + a
#     }
# }
#
# Chunk 14
# h = D(expression((x0 + a * x1)^2 + 10 * (y0 + a * y1)^2 - (x0 + a * x1) * (y0 + a * y1) - (y0 + a * y1)), "a")
# h
#
# 2 * (x1 * (x0 + a * x1)) + 10 * (2 * (y1 * (y0 + a * y1))) - (x1 * (y0 + a * y1) + (x0 + a * x1) * y1) - y1
#
# r = function(r0, dr) {                              # точка r
#     return(r0[1] + a * dr[1], r0[2] + a * dr[2])
# }
# h = function(r) {                                     # функция h(a)
#     return(r[1]^2 + 10 * r[2]^2 - r[1] * r[2] - r[2])
# }
#
# hx = function(r) {                                    # первая производная по x
#     return(2 * r[1] - r[2])
# }
#
# hy = function(r) {                                    # первая производная по y
#     return(20 * r[2] - r[1] - 1)
# }
#
# r0dr = sqrt((dr[1] - r0[1])^2 + (dr[2] - r0[2])^2)    # длина вектора r0dr
# cosa = (r0[1] - dr[1]) / r0dr                         # направляющий cos a
# cosb = (r0[2] - dr[2]) / r0dr                         # направляющий cos b
#
# fs = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs
#
# r = dr
#
# fs1 = fx(r[1], r[2]) * cosa + fy(r[1], r[2]) * cosb
# fs1
#
# g = c(fx(dr[1], dr[2]), fy(dr[1], dr[2]))
# gnc = sqrt(g[1]^2 + g[2]^2)
# gnc
?optim
