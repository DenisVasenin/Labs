library('plyr')
# Установка путей
if (!file.exists("./data")) {
print(paste("Проверьте правильность пути."))
quit()
}
csv_path = "./data/keylog/"
dtime_path = "./data/dtime/"
res_path = "./data/result/"
list_files = list.files(csv_path)
users = data.frame(id = 1:length(list_files), user = list_files)
write.csv(users, file = "./data/result/users.csv", row.names = FALSE)
# Обработка файлов keylog
for (i in 1:length(list_files)) {
tryCatch({
file_path = paste(csv_path, list_files[i], sep = "")
frame_path = paste(dtime_path, 'dtime_', list_files[i], sep = "")
keylog = read.csv(file_path, colClasses = c("integer", "integer"), header = FALSE, sep = ",")
time_pres = keylog[,1]
key_pres = keylog[,2]
len_key_pres = nrow(keylog)
dtime = data.frame(id = i, key1 = key_pres[1:(len_key_pres - 1)], key2 = key_pres[2:len_key_pres], dtime = time_pres[2:len_key_pres] - time_pres[1:(len_key_pres - 1)], stringsAsFactors = FALSE)
#uniq1 = !is.na(dtime$key1)
#uniq2 = !is.na(dtime$key2)
#dtime = dtime[uniq1 & uniq2,]
dtime = dtime[dtime$dtime < 10000,]
dtime = dtime[dtime$dtime > 0,]
write.csv(dtime, file = frame_path, row.names = FALSE)
}, error = function(e){print(e)})
}
# Обьединение файлов dtime
list_files = list.files(dtime_path)
frame_path = paste(dtime_path, list_files[1], sep = "")
result = read.csv(frame_path, header = TRUE, sep = ",")
for (i in 2:length(list_files)) {
frame_path = paste(dtime_path, list_files[i], sep = "")
frame = read.csv(frame_path, header = TRUE, sep = ",")
result = merge.data.frame(result, frame, all = TRUE, sort = FALSE)
}
# Находим "mean + 3sigma"
res_3sg = round(mean(result$dtime) + sd(result$dtime) * 3)
# Убираем строки со значениями ">3sg"
result = result[result$dtime < res_3sg,]
# Получаем кол-во переходов для каждой клавиши
ct_result = acast(result, key1 ~ key2, length, value.var = "dtime")
# Получаем среднее время каждого перехода
#cm_result = acast(result, key1 ~ key2, fun.aggregate = mean, fill = 0, value.var = "dtime")
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres)
# Анализируем данные по каждому пользователю отдельно
c_users = max(unique(result$id))
#dt_list = list(1:c_users)
#min_tab = ct_result
minTabFun = Vectorize(function(tab1, tab2) { min(tab1, tab2) }, c("tab1", "tab2"))
# Получаем кол-во переходов для каждой пары клавиш для фиксированного пользователя
for (i in 1:c_users) {
data_user = result[result$id == i,]
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
#cm_user = acast(data_user, key1 ~ key2, mean, fill = 0, value.var = "dtime")
data_user = ct_result * 0
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
min_tab = matrix(data = minTabFun(ct_result, data_user), nrow = nrow(ct_result))
#dt_list[[i]] = cm_user
}
ct_vect = as.vector(min_tab)
# Будем исследовать только те переходы, которые встречаются у каждого пользователя и больше среднего отклонения
u = ct_vect > round(mean(ct_vect))
# u1 = min_tab > sd(min_tab)
# u2 = ct_result[u1]
# col_name = unique(col(ct_result, as.factor = TRUE))
# row_name = unique(row(ct_result, as.factor = TRUE))
# Вытащим коды клавиш для таких переходов
# u_nums = (1:length(ct_vect))[u]
# k2kQ = length(u_nums)
# u_rows = (u_nums - 1) %% (nrow(result) + 1)
# u_cols = (u_nums - 1) %/% (nrow(result) + 1)
# key1 = rownames(result)[u_rows]
# key2 = rownames(result)[u_cols]
#write.csv(result, file = "./data/result/result.csv", row.names = FALSE)
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user)
u1 = min_tab
r = rownames(ct_result)
names(u1) = r
View(u1)
View(ct_result)
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user)
??rownames
rownames(u1) = r
View(min_tab)
rownames(u1) <- r
View(u1)
u1 = min_tab
rownames(u1) = rownames(ct_result)
colnames(u1) = colnames(ct_result)
View(u1)
View(ct_result)
rownames(min_tab) = rownames(ct_result)
colnames(min_tab) = colnames(ct_result)
View(min_tab)
round(mean(min_tab))
min_tab[min_tab < round(mean(min_tab))] = 0
as.vector(min_tab)
# Chunk 1: setup
knitr::opts_chunk$set(include = FALSE)
library('tools')
library('reshape2')
library('plyr')
# Установка путей
if (!file.exists("./data")) {
print(paste("Проверьте правильность пути."))
quit()
}
csv_path = "./data/keylog/"
dtime_path = "./data/dtime/"
res_path = "./data/result/"
list_files = list.files(csv_path)
users = data.frame(id = 1:length(list_files), user = list_files)
write.csv(users, file = "./data/result/users.csv", row.names = FALSE)
# Обработка файлов keylog
for (i in 1:length(list_files)) {
tryCatch({
file_path = paste(csv_path, list_files[i], sep = "")
frame_path = paste(dtime_path, 'dtime_', list_files[i], sep = "")
keylog = read.csv(file_path, colClasses = c("integer", "integer"), header = FALSE, sep = ",")
time_pres = keylog[,1]
key_pres = keylog[,2]
len_key_pres = nrow(keylog)
dtime = data.frame(id = i, key1 = key_pres[1:(len_key_pres - 1)], key2 = key_pres[2:len_key_pres], dtime = time_pres[2:len_key_pres] - time_pres[1:(len_key_pres - 1)], stringsAsFactors = FALSE)
#uniq1 = !is.na(dtime$key1)
#uniq2 = !is.na(dtime$key2)
#dtime = dtime[uniq1 & uniq2,]
dtime = dtime[dtime$dtime < 10000,]
dtime = dtime[dtime$dtime > 0,]
write.csv(dtime, file = frame_path, row.names = FALSE)
}, error = function(e){print(e)})
}
# Обьединение файлов dtime
list_files = list.files(dtime_path)
frame_path = paste(dtime_path, list_files[1], sep = "")
result = read.csv(frame_path, header = TRUE, sep = ",")
for (i in 2:length(list_files)) {
frame_path = paste(dtime_path, list_files[i], sep = "")
frame = read.csv(frame_path, header = TRUE, sep = ",")
result = merge.data.frame(result, frame, all = TRUE, sort = FALSE)
}
# Находим "mean + 3sigma"
res_3sg = round(mean(result$dtime) + sd(result$dtime) * 3)
# Убираем строки со значениями ">3sg"
result = result[result$dtime < res_3sg,]
# Получаем кол-во переходов для каждой клавиши
ct_result = acast(result, key1 ~ key2, length, value.var = "dtime")
# Получаем среднее время каждого перехода
#cm_result = acast(result, key1 ~ key2, fun.aggregate = mean, fill = 0, value.var = "dtime")
# Анализируем данные по каждому пользователю отдельно
c_users = max(unique(result$id))
#dt_list = list(1:c_users)
#min_tab = ct_result
minTabFun = Vectorize(function(tab1, tab2) { min(tab1, tab2) }, c("tab1", "tab2"))
# Получаем кол-во переходов для каждой пары клавиш для фиксированного пользователя
for (i in 1:c_users) {
data_user = result[result$id == i,]
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
#cm_user = acast(data_user, key1 ~ key2, mean, fill = 0, value.var = "dtime")
data_user = ct_result * 0
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
min_tab = matrix(data = minTabFun(ct_result, data_user), nrow = nrow(ct_result))
#dt_list[[i]] = cm_user
}
#ct_vect = as.vector(min_tab)
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user)
# Будем исследовать только те переходы, которые встречаются у каждого пользователя и больше среднего
#u = ct_vect > round(mean(ct_vect))
rownames(min_tab) = rownames(ct_result)
colnames(min_tab) = colnames(ct_result)
min_tab[min_tab < round(mean(min_tab))] = 0
# Вытащим коды клавиш для таких переходов
rows = c() ; cols = c(); count = 1
for (r in 1:nrow(min_tab)) {
for (c in 1:ncol(min_tab)) {
if (min_tab[r, c] > 0) {
rows[i] = rownames(min_tab[r, c])
cols[i] = colnames(min_tab[r, c])
count = count + 1
}
# Вытащим коды клавиш для таких переходов
# u_nums = (1:length(ct_vect))[u]
# k2kQ = length(u_nums)
# u_rows = (u_nums - 1) %% (nrow(result) + 1)
# u_cols = (u_nums - 1) %/% (nrow(result) + 1)
# key1 = rownames(result)[u_rows]
# key2 = rownames(result)[u_cols]
#write.csv(result, file = "./data/result/result.csv", row.names = FALSE)
rows[1] = rownames(min_tab[1, 1])
rownames(min_tab[r, c])
rownames(min_tab)[1,1]
rownames(min_tab)[1]
# Chunk 1: setup
knitr::opts_chunk$set(include = FALSE)
library('tools')
library('reshape2')
library('plyr')
# Установка путей
if (!file.exists("./data")) {
print(paste("Проверьте правильность пути."))
quit()
}
csv_path = "./data/keylog/"
dtime_path = "./data/dtime/"
res_path = "./data/result/"
list_files = list.files(csv_path)
users = data.frame(id = 1:length(list_files), user = list_files)
write.csv(users, file = "./data/result/users.csv", row.names = FALSE)
# Обработка файлов keylog
for (i in 1:length(list_files)) {
tryCatch({
file_path = paste(csv_path, list_files[i], sep = "")
frame_path = paste(dtime_path, 'dtime_', list_files[i], sep = "")
keylog = read.csv(file_path, colClasses = c("integer", "integer"), header = FALSE, sep = ",")
time_pres = keylog[,1]
key_pres = keylog[,2]
len_key_pres = nrow(keylog)
dtime = data.frame(id = i, key1 = key_pres[1:(len_key_pres - 1)], key2 = key_pres[2:len_key_pres], dtime = time_pres[2:len_key_pres] - time_pres[1:(len_key_pres - 1)], stringsAsFactors = FALSE)
#uniq1 = !is.na(dtime$key1)
#uniq2 = !is.na(dtime$key2)
#dtime = dtime[uniq1 & uniq2,]
dtime = dtime[dtime$dtime < 10000,]
dtime = dtime[dtime$dtime > 0,]
write.csv(dtime, file = frame_path, row.names = FALSE)
}, error = function(e){print(e)})
}
# Обьединение файлов dtime
list_files = list.files(dtime_path)
frame_path = paste(dtime_path, list_files[1], sep = "")
result = read.csv(frame_path, header = TRUE, sep = ",")
for (i in 2:length(list_files)) {
frame_path = paste(dtime_path, list_files[i], sep = "")
frame = read.csv(frame_path, header = TRUE, sep = ",")
result = merge.data.frame(result, frame, all = TRUE, sort = FALSE)
}
# Находим "mean + 3sigma"
res_3sg = round(mean(result$dtime) + sd(result$dtime) * 3)
# Убираем строки со значениями ">3sg"
result = result[result$dtime < res_3sg,]
# Получаем кол-во переходов для каждой клавиши
ct_result = acast(result, key1 ~ key2, length, value.var = "dtime")
# Получаем среднее время каждого перехода
#cm_result = acast(result, key1 ~ key2, fun.aggregate = mean, fill = 0, value.var = "dtime")
# Анализируем данные по каждому пользователю отдельно
c_users = max(unique(result$id))
#dt_list = list(1:c_users)
#min_tab = ct_result
minTabFun = Vectorize(function(tab1, tab2) { min(tab1, tab2) }, c("tab1", "tab2"))
# Получаем кол-во переходов для каждой пары клавиш для фиксированного пользователя
for (i in 1:c_users) {
data_user = result[result$id == i,]
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
#cm_user = acast(data_user, key1 ~ key2, mean, fill = 0, value.var = "dtime")
data_user = ct_result * 0
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
min_tab = matrix(data = minTabFun(ct_result, data_user), nrow = nrow(ct_result))
#dt_list[[i]] = cm_user
}
#ct_vect = as.vector(min_tab)
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user)
# Будем исследовать только те переходы, которые встречаются у каждого пользователя и больше среднего
#u = ct_vect > round(mean(ct_vect))
rownames(min_tab) = rownames(ct_result)
colnames(min_tab) = colnames(ct_result)
min_tab[min_tab < round(mean(min_tab))] = 0
# Вытащим коды клавиш для таких переходов
rows = c() ; cols = c(); i = 1
for (r in 1:nrow(min_tab)) {
for (c in 1:ncol(min_tab)) {
if (min_tab[r, c] > 0) {
rows[i] = rownames(min_tab)[r]
cols[i] = colnames(min_tab)[c]
i = i + 1
}
# Вытащим коды клавиш для таких переходов
# u_nums = (1:length(ct_vect))[u]
# k2kQ = length(u_nums)
# u_rows = (u_nums - 1) %% (nrow(result) + 1)
# u_cols = (u_nums - 1) %/% (nrow(result) + 1)
# key1 = rownames(result)[u_rows]
# key2 = rownames(result)[u_cols]
#write.csv(result, file = "./data/result/result.csv", row.names = FALSE)
View(min_tab)
rows = data.frame(); i = 1
View(min_tab)
name_rows_cols = matrix(); i = 1
View(name_rows_cols)
name_rows_cols = matrix(0, 0); i = 1
name_rows_cols = matrix(); i = 1
# Chunk 1: setup
knitr::opts_chunk$set(include = FALSE)
library('tools')
library('reshape2')
library('plyr')
# Установка путей
if (!file.exists("./data")) {
print(paste("Проверьте правильность пути."))
quit()
}
csv_path = "./data/keylog/"
dtime_path = "./data/dtime/"
res_path = "./data/result/"
list_files = list.files(csv_path)
users = data.frame(id = 1:length(list_files), user = list_files)
write.csv(users, file = "./data/result/users.csv", row.names = FALSE)
# Обработка файлов keylog
for (i in 1:length(list_files)) {
tryCatch({
file_path = paste(csv_path, list_files[i], sep = "")
frame_path = paste(dtime_path, 'dtime_', list_files[i], sep = "")
keylog = read.csv(file_path, colClasses = c("integer", "integer"), header = FALSE, sep = ",")
time_pres = keylog[,1]
key_pres = keylog[,2]
len_key_pres = nrow(keylog)
dtime = data.frame(id = i, key1 = key_pres[1:(len_key_pres - 1)], key2 = key_pres[2:len_key_pres], dtime = time_pres[2:len_key_pres] - time_pres[1:(len_key_pres - 1)], stringsAsFactors = FALSE)
#uniq1 = !is.na(dtime$key1)
#uniq2 = !is.na(dtime$key2)
#dtime = dtime[uniq1 & uniq2,]
dtime = dtime[dtime$dtime < 10000,]
dtime = dtime[dtime$dtime > 0,]
write.csv(dtime, file = frame_path, row.names = FALSE)
}, error = function(e){print(e)})
}
# Обьединение файлов dtime
list_files = list.files(dtime_path)
frame_path = paste(dtime_path, list_files[1], sep = "")
result = read.csv(frame_path, header = TRUE, sep = ",")
for (i in 2:length(list_files)) {
frame_path = paste(dtime_path, list_files[i], sep = "")
frame = read.csv(frame_path, header = TRUE, sep = ",")
result = merge.data.frame(result, frame, all = TRUE, sort = FALSE)
}
# Находим "mean + 3sigma"
res_3sg = round(mean(result$dtime) + sd(result$dtime) * 3)
# Убираем строки со значениями ">3sg"
result = result[result$dtime < res_3sg,]
# Получаем кол-во переходов для каждой клавиши
ct_result = acast(result, key1 ~ key2, length, value.var = "dtime")
# Получаем среднее время каждого перехода
#cm_result = acast(result, key1 ~ key2, fun.aggregate = mean, fill = 0, value.var = "dtime")
# Анализируем данные по каждому пользователю отдельно
c_users = max(unique(result$id))
#dt_list = list(1:c_users)
#min_tab = ct_result
minTabFun = Vectorize(function(tab1, tab2) { min(tab1, tab2) }, c("tab1", "tab2"))
# Получаем кол-во переходов для каждой пары клавиш для фиксированного пользователя
for (i in 1:c_users) {
data_user = result[result$id == i,]
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
#cm_user = acast(data_user, key1 ~ key2, mean, fill = 0, value.var = "dtime")
data_user = ct_result * 0
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
min_tab = matrix(data = minTabFun(ct_result, data_user), nrow = nrow(ct_result))
#dt_list[[i]] = cm_user
}
# Будем исследовать только те переходы, которые встречаются у каждого пользователя и больше среднего
min_tab[min_tab < round(mean(min_tab))] = 0
# Вытащим коды клавиш для таких переходов
rownames(min_tab) = rownames(ct_result)
colnames(min_tab) = colnames(ct_result)
name_rows_cols = matrix(); i = 1
for (r in 1:nrow(min_tab)) {
for (c in 1:ncol(min_tab)) {
if (min_tab[r, c] > 0) {
name_rows_cols[i, 1] = rownames(min_tab)[r]
name_rows_cols[i, 2] = colnames(min_tab)[c]
i = i + 1
}
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user, r, i, c)
#write.csv(result, file = "./data/result/result.csv", row.names = FALSE)
View(name_rows_cols)
name_rows_cols = matrix(2, 2); i = 1
View(name_rows_cols)
name_rows_cols = matrix(0, nrow = 5, ncol = 5); i = 1
View(name_rows_cols)
length(min_tab)
length(min_tab > 0)
length(min_tab[min_tab > 0])
name_rows_cols = matrix(0, nrow = length(min_tab[min_tab > 0]), ncol = 2); i = 1
# Chunk 1: setup
knitr::opts_chunk$set(include = FALSE)
library('tools')
library('reshape2')
library('plyr')
# Установка путей
if (!file.exists("./data")) {
print(paste("Проверьте правильность пути."))
quit()
}
csv_path = "./data/keylog/"
dtime_path = "./data/dtime/"
res_path = "./data/result/"
list_files = list.files(csv_path)
users = data.frame(id = 1:length(list_files), user = list_files)
write.csv(users, file = "./data/result/users.csv", row.names = FALSE)
# Обработка файлов keylog
for (i in 1:length(list_files)) {
tryCatch({
file_path = paste(csv_path, list_files[i], sep = "")
frame_path = paste(dtime_path, 'dtime_', list_files[i], sep = "")
keylog = read.csv(file_path, colClasses = c("integer", "integer"), header = FALSE, sep = ",")
time_pres = keylog[,1]
key_pres = keylog[,2]
len_key_pres = nrow(keylog)
dtime = data.frame(id = i, key1 = key_pres[1:(len_key_pres - 1)], key2 = key_pres[2:len_key_pres], dtime = time_pres[2:len_key_pres] - time_pres[1:(len_key_pres - 1)], stringsAsFactors = FALSE)
#uniq1 = !is.na(dtime$key1)
#uniq2 = !is.na(dtime$key2)
#dtime = dtime[uniq1 & uniq2,]
dtime = dtime[dtime$dtime < 10000,]
dtime = dtime[dtime$dtime > 0,]
write.csv(dtime, file = frame_path, row.names = FALSE)
}, error = function(e){print(e)})
}
# Обьединение файлов dtime
list_files = list.files(dtime_path)
frame_path = paste(dtime_path, list_files[1], sep = "")
result = read.csv(frame_path, header = TRUE, sep = ",")
for (i in 2:length(list_files)) {
frame_path = paste(dtime_path, list_files[i], sep = "")
frame = read.csv(frame_path, header = TRUE, sep = ",")
result = merge.data.frame(result, frame, all = TRUE, sort = FALSE)
}
# Находим "mean + 3sigma"
res_3sg = round(mean(result$dtime) + sd(result$dtime) * 3)
# Убираем строки со значениями ">3sg"
result = result[result$dtime < res_3sg,]
# Получаем кол-во переходов для каждой клавиши
ct_result = acast(result, key1 ~ key2, length, value.var = "dtime")
# Получаем среднее время каждого перехода
#cm_result = acast(result, key1 ~ key2, fun.aggregate = mean, fill = 0, value.var = "dtime")
# Анализируем данные по каждому пользователю отдельно
c_users = max(unique(result$id))
#dt_list = list(1:c_users)
#min_tab = ct_result
minTabFun = Vectorize(function(tab1, tab2) { min(tab1, tab2) }, c("tab1", "tab2"))
# Получаем кол-во переходов для каждой пары клавиш для фиксированного пользователя
for (i in 1:c_users) {
data_user = result[result$id == i,]
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
#cm_user = acast(data_user, key1 ~ key2, mean, fill = 0, value.var = "dtime")
data_user = ct_result * 0
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
min_tab = matrix(data = minTabFun(ct_result, data_user), nrow = nrow(ct_result))
#dt_list[[i]] = cm_user
}
# Будем исследовать только те переходы, которые встречаются у каждого пользователя и больше среднего
min_tab[min_tab < round(mean(min_tab))] = 0
# Вытащим коды клавиш для таких переходов
rownames(min_tab) = rownames(ct_result)
colnames(min_tab) = colnames(ct_result)
name_rows_cols = matrix(0, nrow = length(min_tab[min_tab > 0]), ncol = 2); i = 1
for (r in 1:nrow(min_tab)) {
for (c in 1:ncol(min_tab)) {
if (min_tab[r, c] > 0) {
name_rows_cols[i, 1] = rownames(min_tab)[r]
name_rows_cols[i, 2] = colnames(min_tab)[c]
i = i + 1
}
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user, r, i, c)
#write.csv(result, file = "./data/result/result.csv", row.names = FALSE)
View(name_rows_cols)
View(min_tab)
as.vector(name_rows_cols)
rm(dtime, keylog, frame, key_pres, csv_path, file_path, frame_path, len_key_pres, list_files, res_3sg, time_pres, data_user, ct_user, r, i, c, ct_result)
View(result)
data_user = result[result$id == 1,]
View(data_user)
ct_user = acast(data_user, key1 ~ key2, length, value.var = "dtime")
View(ct_user)
View(data_user)
View(ct_user)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R')
min_tab[min_tab < round(mean(min_tab) + sd(min_tab))] = 0
length(min_tab > 0)
length(min_tab[min_tab > 0])
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R')
View(name_rows_cols)
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R')
View(name_rows_cols)
View(min_tab)
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R')
View(data_user)
View(min_tab)
length(min_tab[min_tab > 0])
View(ct_result)
mean(ct_result)
View(ct_result)
length(ct_result[ct_result > mean(ct_result)])
length(ct_result[ct_result > (mean(ct_result) + sd(st_result))])
length(ct_result[ct_result > (mean(ct_result) + sd(ct_result))])
length(ct_result[ct_result > (mean(ct_result) + 2 * sd(ct_result))])
length(ct_result[ct_result > (mean(ct_result) + 3 * sd(ct_result))])
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R')
View(min_tab)
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R', echo=TRUE)
View(min_tab)
View(ct_result)
View(ct_user)
data_user = ct_result * 0
View(data_user)
data_user[rownames(ct_user), colnames(ct_user)] = ct_user
View(data_user)
View(ct_result)
View(data_user)
View(name_rows_cols)
source('~/Documents/Programs/R/MetOpt/RGR/Anal.R', echo=TRUE)
View(min_tab)
View(ct_result)
